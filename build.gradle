buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.6-SNAPSHOT'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

version = modVersion
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = project.mcpVersion
    def args = ["-Dfml.coreMods.load=club.maxstats.zkesp.MixinLoader"]
    clientJvmArgs.addAll(args)
    makeObfSourceJar = true
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/maven/' }
}

dependencies {
    compile ("org.spongepowered:mixin:0.7.11-SNAPSHOT")
}

processResources {
    inputs.property "version", modVersion
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": modVersion, "mcversion": project.minecraft.version, "modid": modBaseName, "name": modName, "description": modDescription, "url": modURL, "updateUrl": updateUrl
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

shadowJar {
    exclude 'GradleStart**'
    exclude '.cache'
    exclude 'tv.twitch:twitch'
    dependencies {
        include(dependency('org.spongepowered:mixin'))
    }

    classifier = ''
}

mixin {
    add sourceSets.main, "zkesp.refmap.json"
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

configurations {
    shade
    external
    compile.extendsFrom shade
}

build {
    clean
    build
    shadowJar
    reobf
}

// Current Forge Jar
//jar {
//    from(configurations.provided.collect {
//        it.isDirectory() ? it : zipTree(it)
//    }) {
//        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
//    }
//
//    manifest {
//        attributes "FMLCorePlugin": "club.maxstats.zkesp.MixinLoader"
//        attributes "FMLCorePluginContainsFMLMod": "true"
//        attributes "ForceLoadAsMod": "true"
//        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
//        attributes "TweakOrder": "0"
//        attributes "MixinConfigs": "zkesp.mixins.json"
//    }
//}

jar {
    manifest.attributes(
            'FMLCorePluginContainsFMLMod': true,
            'ForceLoadAsMod': true,
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': 'zkesp.mixins.json',
            'FMLCorePlugin': 'club.maxstats.zkesp.MixinLoader'
    )
}

build.dependsOn shadowJar